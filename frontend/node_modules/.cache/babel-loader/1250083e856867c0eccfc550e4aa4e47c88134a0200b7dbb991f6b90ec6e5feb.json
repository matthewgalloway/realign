{"ast":null,"code":"export default {\n  data() {\n    return {\n      speechData: ''\n    };\n  },\n  created() {\n    this.initializeSpeech();\n  },\n  methods: {\n    initializeSpeech() {\n      const receivedSpeech = this.$route.query.speech;\n      console.log('Received speech data:', receivedSpeech);\n      if (receivedSpeech) {\n        try {\n          // Parse the received data\n          const parsedData = JSON.parse(receivedSpeech);\n          // Extract the nested speech content\n          this.speechData = parsedData.speech.speech || '';\n          console.log('Parsed speech data:', this.speechData);\n        } catch (error) {\n          console.error('Error parsing speech data:', error);\n          this.speechData = 'Unable to parse speech data';\n        }\n      } else {\n        console.error('No speech data received in route query');\n        this.speechData = 'No speech data received';\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","speechData","created","initializeSpeech","methods","receivedSpeech","$route","query","speech","console","log","parsedData","JSON","parse","error"],"sources":["/Users/matthew.galloway@dataiku.com/realign-app/realign-connection-app/frontend/src/components/ThirdPage.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <h1>Your Constructive Communication</h1>\n    <div class=\"text-left\">\n      <p class=\"mb-2\">Remember:</p>\n      <ul class=\"list-disc pl-5 mb-4\">\n        <li>Connecting with someone will feel better than being right</li>\n        <li>Your growning as a person by expressing yourself clearly and collaboratively </li>\n      </ul>\n    </div>\n    <div v-if=\"speechData\">\n      <textarea v-model=\"speechData\" class=\"text-box\" style=\"height: 400px;\"></textarea>\n    </div>\n    <div v-else>\n      <p>No speech data received or unable to parse the data.</p>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      speechData: ''\n    }\n  },\n  created() {\n    this.initializeSpeech();\n  },\n  methods: {\n    initializeSpeech() {\n        const receivedSpeech = this.$route.query.speech;\n        console.log('Received speech data:', receivedSpeech);\n\n        if (receivedSpeech) {\n          try {\n            // Parse the received data\n            const parsedData = JSON.parse(receivedSpeech);\n            // Extract the nested speech content\n            this.speechData = parsedData.speech.speech || '';\n            console.log('Parsed speech data:', this.speechData);\n          } catch (error) {\n            console.error('Error parsing speech data:', error);\n            this.speechData = 'Unable to parse speech data';\n          }\n        } else {\n          console.error('No speech data received in route query');\n          this.speechData = 'No speech data received';\n        }\n      }\n  }\n}\n</script>\n<style scoped>\n\n.text-left {\n  text-align: left;\n}\n.btn {\n  transition: all 0.3s ease;\n}\n\n</style>"],"mappings":"AAoBA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE;IACd;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,gBAAgB,CAAC,CAAC;EACzB,CAAC;EACDC,OAAO,EAAE;IACPD,gBAAgBA,CAAA,EAAG;MACf,MAAME,cAAa,GAAI,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,MAAM;MAC/CC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEL,cAAc,CAAC;MAEpD,IAAIA,cAAc,EAAE;QAClB,IAAI;UACF;UACA,MAAMM,UAAS,GAAIC,IAAI,CAACC,KAAK,CAACR,cAAc,CAAC;UAC7C;UACA,IAAI,CAACJ,UAAS,GAAIU,UAAU,CAACH,MAAM,CAACA,MAAK,IAAK,EAAE;UAChDC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAACT,UAAU,CAAC;QACrD,EAAE,OAAOa,KAAK,EAAE;UACdL,OAAO,CAACK,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;UAClD,IAAI,CAACb,UAAS,GAAI,6BAA6B;QACjD;MACF,OAAO;QACLQ,OAAO,CAACK,KAAK,CAAC,wCAAwC,CAAC;QACvD,IAAI,CAACb,UAAS,GAAI,yBAAyB;MAC7C;IACF;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}