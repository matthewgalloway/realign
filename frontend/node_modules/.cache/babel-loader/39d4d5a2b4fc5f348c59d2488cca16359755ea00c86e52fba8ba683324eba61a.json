{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport api from '../api';\nexport default {\n  data() {\n    return {\n      questions: [],\n      originalText: '',\n      answers: [],\n      wordCounts: []\n    };\n  },\n  computed: {\n    allAnswersMeetWordCount() {\n      return this.wordCounts.every(count => count >= 30);\n    }\n  },\n  created() {\n    this.initializeData();\n  },\n  methods: {\n    initializeData() {\n      try {\n        const questionsData = JSON.parse(this.$route.query.questions || '[]');\n        this.questions = Array.isArray(questionsData) ? questionsData : Object.values(questionsData);\n        this.originalText = this.$route.query.originalText || '';\n        this.answers = new Array(this.questions.length).fill('');\n        this.wordCounts = new Array(this.questions.length).fill(0);\n        console.log('Initialized data:', {\n          questions: this.questions,\n          originalText: this.originalText,\n          answers: this.answers,\n          wordCounts: this.wordCounts\n        });\n      } catch (error) {\n        console.error('Error initializing data:', error);\n        this.questions = [];\n        this.answers = [];\n        this.wordCounts = [];\n      }\n    },\n    updateWordCount(index) {\n      this.wordCounts[index] = this.answers[index].trim().split(/\\s+/).filter(word => word.length > 0).length;\n    },\n    async submitAnswers() {\n      if (!this.allAnswersMeetWordCount) return;\n      try {\n        console.log('Submitting answers:', {\n          originalText: this.originalText,\n          questions: this.questions,\n          answers: this.answers\n        });\n        const response = await api.post('/api/generate-speech', {\n          originalText: this.originalText,\n          questions: this.questions,\n          answers: this.answers\n        });\n        console.log('Response:', response.data);\n        if (response.data.speech) {\n          console.log('Received speech data, navigating to ThirdPage');\n          this.$router.push({\n            name: 'ThirdPage',\n            query: {\n              speech: JSON.stringify(response.data)\n            }\n          });\n        } else {\n          throw new Error('No speech data in response');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n        console.error('Error response:', error.response);\n        alert(`An error occurred: ${error.response?.data?.error || error.message}`);\n      }\n    }\n  }\n};","map":{"version":3,"names":["api","data","questions","originalText","answers","wordCounts","computed","allAnswersMeetWordCount","every","count","created","initializeData","methods","questionsData","JSON","parse","$route","query","Array","isArray","Object","values","length","fill","console","log","error","updateWordCount","index","trim","split","filter","word","submitAnswers","response","post","speech","$router","push","name","stringify","Error","alert","message"],"sources":["/Users/matthew.galloway@dataiku.com/realign-app/realign-connection-app/frontend/src/components/SecondPage.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <h1>Reflect on These Questions</h1>\n    <p class=\"mb-4\">Take your time to think deeply about each question. Your honest responses will help guide the conversation with your partner.</p>\n    \n    <div v-for=\"(question, index) in questions\" :key=\"index\" class=\"mb-6\">\n      <p class=\"mb-2\">{{ question }}</p>\n      <textarea \n        v-model=\"answers[index]\" \n        @input=\"updateWordCount(index)\"\n        class=\"text-box\"\n        :placeholder=\"'Your answer to question ' + (index + 1)\"\n      ></textarea>\n      <div class=\"text-right mb-2\">\n        <span :class=\"{ 'text-red-500': wordCounts[index] < 30, 'text-green-500': wordCounts[index] >= 30 }\">\n          {{ wordCounts[index] }} / 30 words minimum\n        </span>\n      </div>\n    </div>\n    \n    <div class=\"text-center\">\n      <button \n        @click=\"submitAnswers\"\n        class=\"btn px-4 py-2 rounded transition-all duration-300\"\n        :disabled=\"!allAnswersMeetWordCount\"\n        :class=\"{\n          'bg-blue-500 text-white hover:bg-blue-600': allAnswersMeetWordCount,\n          'bg-gray-300 text-gray-500 cursor-not-allowed': !allAnswersMeetWordCount\n        }\"\n      >\n        I'm ready for the solution\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport api from '../api'; \n\nexport default {\n  data() {\n    return {\n      questions: [],\n      originalText: '',\n      answers: [],\n      wordCounts: []\n    }\n  },\n  computed: {\n    allAnswersMeetWordCount() {\n      return this.wordCounts.every(count => count >= 30);\n    }\n  },\n  created() {\n    this.initializeData();\n  },\n  methods: {\n    initializeData() {\n      try {\n        const questionsData = JSON.parse(this.$route.query.questions || '[]');\n        this.questions = Array.isArray(questionsData) ? questionsData : Object.values(questionsData);\n        this.originalText = this.$route.query.originalText || '';\n        this.answers = new Array(this.questions.length).fill('');\n        this.wordCounts = new Array(this.questions.length).fill(0);\n        \n        console.log('Initialized data:', {\n          questions: this.questions,\n          originalText: this.originalText,\n          answers: this.answers,\n          wordCounts: this.wordCounts\n        });\n      } catch (error) {\n        console.error('Error initializing data:', error);\n        this.questions = [];\n        this.answers = [];\n        this.wordCounts = [];\n      }\n    },\n    updateWordCount(index) {\n      this.wordCounts[index] = this.answers[index].trim().split(/\\s+/).filter(word => word.length > 0).length;\n    },\n    async submitAnswers() {\n      if (!this.allAnswersMeetWordCount) return;\n      \n      try {\n        console.log('Submitting answers:', {\n          originalText: this.originalText,\n          questions: this.questions,\n          answers: this.answers\n        });\n\n        const response = await api.post('/api/generate-speech', {\n          originalText: this.originalText,\n          questions: this.questions,\n          answers: this.answers\n        });\n\n        console.log('Response:', response.data);\n\n        if (response.data.speech) {\n          console.log('Received speech data, navigating to ThirdPage');\n          this.$router.push({\n            name: 'ThirdPage',\n            query: { speech: JSON.stringify(response.data) }\n          });\n        } else {\n          throw new Error('No speech data in response');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n        console.error('Error response:', error.response);\n        alert(`An error occurred: ${error.response?.data?.error || error.message}`);\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.container {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n}\n.text-box {\n  width: 100%;\n  height: 100px;\n  margin-bottom: 10px;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n.btn {\n  transition: all 0.3s ease;\n}\n.btn:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}